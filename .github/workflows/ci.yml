name: CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "Snatch.py"
      - "setup.py"
      - "setup_ffmpeg.py"
      - "interactive_mode.py"
      - "test_run.py"
      - "requirements.txt"
      - "tests/**"
      - ".github/workflows/**"
  pull_request:
    branches:
      - main
    paths:
      - "Snatch.py"
      - "setup.py"
      - "setup_ffmpeg.py"
      - "interactive_mode.py"
      - "test_run.py"
      - "requirements.txt"
      - "tests/**"
      - ".github/workflows/**"
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sundays
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint
          pip install -r requirements.txt

      # Set up .pylintrc if it doesn't exist
      - name: Configure Pylint
        run: |
          if [ ! -f .pylintrc ]; then
            echo "[MASTER]
            init-hook='import sys; sys.path.append(\".\")'
            
            [MESSAGES CONTROL]
            disable=C0111,C0103,C0303,C0330,C0326,W0511,R0903,R0913,R0914,R0912,R0915,R0902,R0801,W0212,W0703,C0111,C0103,C0303,C0330,C0326
            
            [FORMAT]
            max-line-length=127" > .pylintrc
          fi

      - name: Check formatting with Black
        id: black
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Fix formatting with Black if check fails
        if: steps.black.outcome == 'failure'
        run: |
          black .
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Fix code formatting with Black" || echo "No changes to commit"

      - name: Check imports with isort
        id: isort
        run: |
          isort --check-only --profile black .
        continue-on-error: true

      - name: Fix imports with isort if check fails
        if: steps.isort.outcome == 'failure'
        run: |
          isort --profile black .
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Fix imports with isort" || echo "No changes to commit"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Full check with exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run pylint
        run: |
          pylint --recursive=y --output-format=colorized . || echo "Pylint completed with warnings/errors"
        continue-on-error: true

      - name: Generate code quality reports
        run: |
          mkdir -p reports
          flake8 . --output-file=reports/flake8.txt --exit-zero
          pylint --recursive=y . -f json > reports/pylint.json || true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: reports/
          retention-days: 14

  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.10", "3.11"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-html
          pip install -r requirements.txt
        shell: bash

      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg -y
          # Fix potential PATH issues
          echo "$env:ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        shell: pwsh

      - name: Verify FFmpeg installation
        run: |
          ffmpeg -version
        shell: bash
        continue-on-error: true

      - name: Create directories
        run: |
          mkdir -p test_output tests
          if [ ! -f tests/__init__.py ]; then touch tests/__init__.py; fi
        shell: bash

      # Create basic test file if none exists
      - name: Create basic test file if needed
        run: |
          if [ ! -f tests/test_basic.py ]; then
            echo '
          import sys
          import os
          import pytest

          sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

          def test_import():
              """Test that the main module can be imported."""
              try:
                  import Snatch
                  assert Snatch.__name__ == "Snatch"
              except ImportError:
                  pytest.skip("Snatch module not found")
          ' > tests/test_basic.py
          fi
        shell: bash

      - name: Run basic tests
        run: |
          python test_run.py
        continue-on-error: true

      - name: Test with pytest
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml --html=pytest_report.html
        shell: bash
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest_report.html
            junit/
            test_output/
          retention-days: 14

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r requirements.txt

      - name: Run Bandit security scanner
        run: |
          mkdir -p security_reports
          bandit -r . -f json -o security_reports/bandit-results.json -x tests,venv,.venv
        continue-on-error: true

      - name: Check dependencies for vulnerabilities
        run: |
          safety check -r requirements.txt --output json --save security_reports/safety-results.json || true
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: security_reports/
          retention-days: 14

  build:
    name: Build Package
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools twine

      - name: Build package
        run: |
          python -m build --sdist --wheel .

      - name: Check package with twine
        run: |
          twine check dist/*

      - name: Store built package
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

      - name: Test installation from wheel
        run: |
          pip install --force-reinstall dist/*.whl

  readme-badge:
    name: Update README Badge
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create badges directory
        run: |
          mkdir -p .github/badges

      - name: Generate CI badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: snatch-ci-status.json
          label: CI
          message: passing
          color: green

  notify:
    name: Notify on completion
    needs: [build, readme-badge]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set job status
        id: status
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "STATUS=✅ CI Pipeline completed successfully" >> $GITHUB_OUTPUT
          else
            echo "STATUS=⚠️ CI Pipeline completed with issues" >> $GITHUB_OUTPUT
          fi

      - name: Print completion message
        run: |
          echo "${{ steps.status.outputs.STATUS }}"
          echo "All artifacts have been uploaded and are available in the Actions tab"
